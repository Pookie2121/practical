# -*- coding: utf-8 -*-
"""McCulloch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D5nvSdQ1F2wiExwpAwA3QoEmoRuIu6DH
"""

import numpy as np
import matplotlib.pyplot as plt

class McCullochPittsNeuron:
    def __init__(self, weights, threshold):
        self.weights = weights
        self.threshold = threshold

    def activate(self, inputs):
        weighted_sum = np.dot(inputs, self.weights)
        return 1 if weighted_sum >= self.threshold else 0

and_neuron = McCullochPittsNeuron(weights=[1, 1], threshold=2)
or_neuron = McCullochPittsNeuron(weights=[1, 1], threshold=1)
not_neuron = McCullochPittsNeuron(weights=[-1], threshold=0)

inputs = [(0, 0), (0, 1), (1, 0), (1, 1)]
not_inputs = [0, 1]

print("McCulloch-Pitts Neuron Demonstrations:")
print("\nAND Gate:")
for input_pair in inputs:
    output = and_neuron.activate(input_pair)
    print(f"Input: {input_pair}, Output: {output}")

print("\nOR Gate:")
for input_pair in inputs:
    output = or_neuron.activate(input_pair)
    print(f"Input: {input_pair}, Output: {output}")

print("\nNOT Gate:")
for input_val in not_inputs:
    output = not_neuron.activate([input_val])
    print(f"Input: {input_val}, Output: {output}")

plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
x = np.linspace(-0.5, 1.5, 100)
y = (and_neuron.threshold - and_neuron.weights[0] * x) / and_neuron.weights[1]
plt.plot(x, y, 'r-', label='Decision Boundary')
plt.scatter([0, 0, 1, 1], [0, 1, 0, 1], c=['blue', 'blue', 'blue', 'red'])
plt.annotate('(0,0)=0', (0, 0), xytext=(-0.1, -0.1))
plt.annotate('(0,1)=0', (0, 1), xytext=(-0.1, 1.1))
plt.annotate('(1,0)=0', (1, 0), xytext=(1.1, -0.1))
plt.annotate('(1,1)=1', (1, 1), xytext=(1.1, 1.1))
plt.xlim(-0.5, 1.5)
plt.ylim(-0.5, 1.5)
plt.xlabel('Input 1')
plt.ylabel('Input 2')
plt.title('AND Gate')
plt.grid(True)

plt.subplot(1, 2, 2)
y = (or_neuron.threshold - or_neuron.weights[0] * x) / or_neuron.weights[1]
plt.plot(x, y, 'r-', label='Decision Boundary')
plt.scatter([0, 0, 1, 1], [0, 1, 0, 1], c=['blue', 'red', 'red', 'red'])
plt.annotate('(0,0)=0', (0, 0), xytext=(-0.1, -0.1))
plt.annotate('(0,1)=1', (0, 1), xytext=(-0.1, 1.1))
plt.annotate('(1,0)=1', (1, 0), xytext=(1.1, -0.1))
plt.annotate('(1,1)=1', (1, 1), xytext=(1.1, 1.1))
plt.xlim(-0.5, 1.5)
plt.ylim(-0.5, 1.5)
plt.xlabel('Input 1')
plt.ylabel('Input 2')
plt.title('OR Gate')
plt.grid(True)

plt.tight_layout()
plt.show()