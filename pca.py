# -*- coding: utf-8 -*-
"""pca.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AyNhdu5JqguUmgt4zCKkeBWqpNMfIwVk
"""

import numpy as np
import matplotlib.pyplot as plt

class PCA:
    def __init__(self, n_components=2):
        self.n_components = n_components

    def fit(self, X):
        self.mean = np.mean(X, axis=0)
        X_centered = X - self.mean

        covariance_matrix = np.cov(X_centered.T)

        eigenvalues, eigenvectors = np.linalg.eig(covariance_matrix)

        sorted_indices = np.argsort(eigenvalues)[::-1]
        self.eigenvectors = eigenvectors[:, sorted_indices]
        self.eigenvalues = eigenvalues[sorted_indices]
        self.components = self.eigenvectors[:, :self.n_components]

    def transform(self, X):
        X_centered = X - self.mean
        return np.dot(X_centered, self.components)

    def fit_transform(self, X):
        self.fit(X)
        return self.transform(X)

np.random.seed(0)
X = np.random.randn(100, 3)

pca = PCA(n_components=2)
X_reduced = pca.fit_transform(X)

plt.scatter(X_reduced[:, 0], X_reduced[:, 1])
plt.title('PCA Result (2D Projection of 3D data)')
plt.xlabel('First Principal Component')
plt.ylabel('Second Principal Component')
plt.show()

print("Original data shape:", X.shape)
print("Reduced data shape:", X_reduced.shape)